

배열

	==> 같은 형태의 데이터를 여러개 모아서 한꺼번에 관리하는 방식
		데이터가 많은경우 원칙적으로 데이터 갯수만큼 변수를 만들어야 한다.
		이러다보면 변수를 만들때도 불편하고 데이터를 사용할때도 불편함이 있다.
		이런 문제를 해결하기 위한 방법으로 제시된 것이 [배열] 이다/
		
		즉, 배열이란?
		하나의 변수를 이용해서 여러개의 데이터를 관리할 수 있도록 하는 것.
		
		
	참고 ]
		자바에서 변수의 형태
		
			1. 기본형태(Primitive Type, Value Type)
				==> 변수 안에 기억된 내용이 데이터 자체인 경우
					변수가 기억한 내용을 찾으면 데이터의 주소를 알려준다.
			
			2. 주소형태(Reference Type, 참조형)
				==> 변수 안에 기억된 내용이 Heap에 만들어진 주소인 경우
					변수를 찾으면 그 안의 데이터가 힙의 주소를 알려준다.
					
					기본형 변수 이외의 모든 변수는 참조형 변수가 된다.
					
Heap 영역 ]
	
	특징 ]
		
		1. 반드시 주소를 알아야만 사용할 수 있는 영역
		2. 8가지 영역중에서 크기가 가장 큰 영역
			확장이 가능하다.
			(부족하면 스스로 다른 영역을 빼앗아서 크기를 확장시킨다.)
		
		3. 원칙적으로 한번 만들어지면 그 프로그램이 종료될 때까지 없어지지 않는다.
		*****
		4. Heap영역에 생기는 메모리는 자동 초기화가 된다.
			
			int => 0
			float => 0.0f
			boolean => false
			char =>(char) 0
			
-------------------------------------------------------------------
배열을 만드는 방법
	1. 배열은 원칙적으로 데이터가 기억될 공간을 Heap에 만들어야 한다.
	
		명령어 ]
			
			new 데이터타입[갯수];
			
			데이터타입 : Heap에 만들 데이터 영역의 형태를 지정한다.
			[갯수] 	   : Heap에 만들 데이터 영역의 갯수를 지정한다.
			
		예 ]
			
			new int[6];
			==> Heap 영역에 int 타입의 데이터를 기억할 메모리 공간을 6개 만들어주세요.
			
			new float[5];
			==> Heap 영역에 float 타입의 데이터를 기억할 메모리 공간을 5개 만들어주세요.
			
	참고 ]
		
		new 명령
			1. Heap에 뭔가를 만드세요.
			2. 만들어진 메모리의 시작 주소를 알려줄께요.
			
2. Heap에 있는 메모리의 주소를 기억할 변수를 만들어야 한다.

	명령어 ]
		
		데이터타입[] 변수이름;
		
	예 ]
		int[] num;
		
		데이터타입[]	: 관리할 Heap영역에 있는 실제 데이터 형태에 따라 달라진다.
							
							==> 전문용어로 Heap Type 이라고 부른다.
		
		
		**
		결론
			
			Heap Type 이 같은 주소만 기억할 수 있다.
			
		
		int[] num = new float[5];	--> X : Heap Type 이 다르기 때문에.
		
		int[] num = new int[6]; 	--> O : Heap Type 이 같기 때문에.
		
		
결론 ]
	배열 만드는 방법
		
		1. 만들 배열이 Heap에 생기는데 이 주소를 기억할 변수를 준비한다.
		
			int[] num;
			
		2. Heap에 필요한 메모리를 만들고 그 주소를 준비한 변수에 기억시킨다.
		
			num = new int[6];
			

-----------------------------------------------------------------------------------

배열 사용 방법

	명령어 ]
		 
			
			변수[위치값]; 
			
			참고 ]
				위치값(index)은 0부터 시작한다.
				
	참고 ]
		
		배열주소.length
		==> 배열주소가 관리하는 곳에 있는 메모리의 갯수를 알려주는 명령어.
		
		
		예 ]
			
			int[] num = new int[6];
			
			System.out.println(num.length); ==> 6
			==> num이 가리키는 곳에 가면 6개의 메모리가 존재하기 때문에
			
	참고]
		
		배열의 초기화
		==> 배열 메모리는 Heap에 생기므로 자동 초기화가 이루어진다.
		
			정수 : 0
			실수 : 0.0
			논리 : false
			문자 : (char) 0 <== ascii 코드값 0에 해당하는 문자로 초기화가 된다.
			
		경우에 따라서는 배열 메모리에 강제로 특정 값을 입력할 필요도 있다.
		==> 이것을 배열의 초기화라 한다.
		
		
		데이터를 가지고 배열을 만드는 방법(초기화와 동시에 배열 만드는 방법)
		형식 1]
			
			int[] num = {1,2,3,4,5,6};
		
		형식 2]
			
			int[] num = new int[]{1,2,3,4,5,6};
			
		주의 ]
			배열을 초기화 할 경우에는 배열의 크기를 입력하지 못한다.
			대신 초기화 데이터를 이용해서 자동으로 배열의 크기가 결정된다.
			
	참고 ]
		
		Arrays.toString()
		==> 배열을 출력하려면 원칙적으로 반복문을 이용해서 하나씩 꺼내서 출력을 해야하는데
			단순히 담겨있는 내용만 확인하는 경우에는 불편하다.
			
			배열에 담겨있는 내용을 확인할 수 있는 문자열로 반환해주는 기능을 가진 함수.
			따라서 배열의 내용을 확인하는 용도로만 사용해야 한다.
			
			예 ]
				"1,2,3"		==> 1 -> 10 X
				
			사용방법 ]
				
				Array.toString(배열변수);
			
----------------------------------------------------------------------------

향상된 for 명령
	
	
	: 배열과 같이 여러개의 데이터를 하나의 변수로 관리하는 데이터를 
	  하나씩 꺼내서 다루고자 할때 사용하는 반복문
	  
	  형식]
	  	
	  	for(데이터타입 변수이름 : 배열변수){
	  		변수이름을 사용
	  	}
		
		==> 배열변수 에 담겨진 데이터를 인덱스가 0인 것부터 순차적으로 꺼내서 마지막 데이터까지
			앞의 변수에 담아준다.
			
		예 ]
			
			int[] num = {10,20,30};
			
			for(int no : num){
				System.out.print(no + " | ");
			}
			
			==> 10 | 20 | 30 |